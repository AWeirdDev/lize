from typing import Any, Callable, Generic, Never, TypeVar, Union

Value = Union[str, int, float, bool, list["Value"], dict["Value", "Value"], None]

def serialize(x: Value) -> bytes: ...
def deserialize(x: bytes) -> Any: ...


T = TypeVar("T")

class Runnable(Generic[T]):
    def __init__(self) -> Never: ...
    
    @staticmethod
    def from_pyfn(fn: Callable[..., T]) -> "Runnable[T]": ...

    @staticmethod
    def from_bytes(bytes: bytes) -> "Runnable[T]": ...

    def run(self, *args: Any, **kwargs: Any) -> T: ...
    def into_bytes(self) -> bytes: ...
